const fs = require('fs');
const path = require('path');

// Correct copyright translations for each language
const copyrightTranslations = {
  en: "¬© 2025 ATM Franchise India. All rights reserved. | RBI Licensed Partners Only",
  hi: "¬© 2025 ‡§è‡§ü‡•Ä‡§è‡§Æ ‡§´‡•ç‡§∞‡•à‡§Ç‡§ö‡§æ‡§á‡§ú‡§º ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ‡•§ ‡§∏‡§∞‡•ç‡§µ‡§æ‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§‡•§ | ‡§ï‡•á‡§µ‡§≤ RBI ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§≠‡§æ‡§ó‡•Ä‡§¶‡§æ‡§∞",
  bn: "¬© 2025 ‡¶è‡¶ü‡¶ø‡¶è‡¶Æ ‡¶´‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶û‡ßç‡¶ö‡¶æ‡¶á‡¶ú ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∏‡ßç‡¶¨‡¶§‡ßç‡¶¨ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§ | ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ RBI ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶Ö‡¶Ç‡¶∂‡ßÄ‡¶¶‡¶æ‡¶∞",
  ta: "¬© 2025 ‡Æè‡Æü‡Æø‡Æé‡ÆÆ‡Øç ‡ÆÉ‡Æ™‡Æø‡Æ∞‡Ææ‡Æû‡Øç‡Æö‡Øà‡Æ∏‡Øç ‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Ææ. ‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æâ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æµ‡Øà. | RBI ‡Æâ‡Æ∞‡Æø‡ÆÆ‡ÆÆ‡Øç ‡Æ™‡ØÜ‡Æ±‡Øç‡Æ± ‡Æ™‡Æô‡Øç‡Æï‡ØÅ‡Æ§‡Ææ‡Æ∞‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç",
  te: "¬© 2025 ‡∞è‡∞ü‡±Ä‡∞é‡∞Ç ‡∞´‡±ç‡∞∞‡∞æ‡∞Ç‡∞ö‡±à‡∞ú‡±Ä ‡∞á‡∞Ç‡∞°‡∞ø‡∞Ø‡∞æ. ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞π‡∞ï‡±ç‡∞ï‡±Å‡∞≤‡±Å ‡∞∏‡±Å‡∞∞‡∞ï‡±ç‡∞∑‡∞ø‡∞§‡∞Ç. | RBI ‡∞≤‡±à‡∞∏‡±Ü‡∞®‡±ç‡∞∏‡±ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞® ‡∞≠‡∞æ‡∞ó‡∞∏‡±ç‡∞µ‡∞æ‡∞Æ‡±Å‡∞≤‡±Å ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á",
  mr: "¬© 2025 ‡§è‡§ü‡•Ä‡§è‡§Æ ‡§´‡•ç‡§∞‡§Å‡§ö‡§æ‡§Ø‡§ù‡•Ä ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ. ‡§∏‡§∞‡•ç‡§µ ‡§π‡§ï‡•ç‡§ï ‡§∞‡§æ‡§ñ‡•Ä‡§µ. | ‡§ï‡•á‡§µ‡§≥ RBI ‡§™‡§∞‡§µ‡§æ‡§®‡§æ‡§ß‡§æ‡§∞‡§ï ‡§≠‡§æ‡§ó‡•Ä‡§¶‡§æ‡§∞",
  gu: "¬© 2025 ‡™è‡™ü‡´Ä‡™è‡™Æ ‡™´‡´ç‡™∞‡´á‡™®‡´ç‡™ö‡™æ‡™á‡™ù ‡™á‡™®‡´ç‡™°‡™ø‡™Ø‡™æ. ‡™¨‡™ß‡™æ ‡™π‡™ï‡´ã ‡™Ö‡™®‡™æ‡™Æ‡™§. | ‡™Æ‡™æ‡™§‡´ç‡™∞ RBI ‡™≤‡™æ‡™á‡™∏‡™®‡´ç‡™∏‡™ß‡™æ‡™∞‡™ï ‡™≠‡™æ‡™ó‡´Ä‡™¶‡™æ‡™∞‡´ã",
  ur: "¬© 2025 ÿß€í Ÿπ€å ÿß€åŸÖ ŸÅÿ±ŸÜ⁄Üÿßÿ¶ÿ≤ ÿßŸÜ⁄à€åÿß€î ÿ™ŸÖÿßŸÖ ÿ≠ŸÇŸàŸÇ ŸÖÿ≠ŸÅŸàÿ∏ €Å€å⁄∫€î | ÿµÿ±ŸÅ RBI ŸÑÿßÿ¶ÿ≥ŸÜÿ≥ €åÿßŸÅÿ™€Å Ÿæÿßÿ±ŸπŸÜÿ±ÿ≤",
  kn: "¬© 2025 ‡≤é‡≤ü‡≤ø‡≤é‡≤Ç ‡≤´‡≥ç‡≤∞‡≤æ‡≤Ç‡≤ö‡≥à‡≤∏‡≤ø ‡≤á‡≤Ç‡≤°‡≤ø‡≤Ø‡≤æ. ‡≤é‡≤≤‡≥ç‡≤≤‡≤æ ‡≤π‡≤ï‡≥ç‡≤ï‡≥Å‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤Ø‡≥ç‡≤¶‡≤ø‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. | RBI ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø ‡≤™‡≤°‡≥Ü‡≤¶ ‡≤™‡≤æ‡≤≤‡≥Å‡≤¶‡≤æ‡≤∞‡≤∞‡≥Å ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞",
  or: "¬© 2025 ‡¨è‡¨ü‡¨ø‡¨è‡¨Æ ‡¨´‡≠ç‡¨∞‡¨æ‡¨û‡≠ç‡¨ö‡¨æ‡¨á‡¨ú ‡¨á‡¨£‡≠ç‡¨°‡¨ø‡¨Ü‡•§ ‡¨∏‡¨Æ‡¨∏‡≠ç‡¨§ ‡¨Ö‡¨ß‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨∏‡¨Ç‡¨∞‡¨ï‡≠ç‡¨∑‡¨ø‡¨§‡•§ | ‡¨ï‡≠á‡¨¨‡¨≥ RBI ‡¨≤‡¨æ‡¨á‡¨∏‡≠á‡¨®‡≠ç‡¨∏‡¨™‡≠ç‡¨∞‡¨æ‡¨™‡≠ç‡¨§ ‡¨Ö‡¨Ç‡¨∂‡≠Ä‡¨¶‡¨æ‡¨∞",
  pa: "¬© 2025 ‡®è‡®ü‡©Ä‡®ê‡®Æ ‡®´‡®∞‡©à‡®Ç‡®ö‡®æ‡®à‡®ú‡®º ‡®á‡©∞‡®°‡©Ä‡®Ü‡•§ ‡®∏‡®æ‡®∞‡©á ‡®π‡©±‡®ï ‡®∞‡®æ‡®ñ‡®µ‡©á‡®Ç ‡®π‡®®‡•§ | ‡®∏‡®ø‡®∞‡®´‡®º RBI ‡®≤‡®æ‡®à‡®∏‡©à‡®Ç‡®∏‡®∏‡®º‡©Å‡®¶‡®æ ‡®≠‡®æ‡®à‡®µ‡®æ‡®≤",
  as: "¬© 2025 ‡¶è‡¶ü‡¶ø‡¶è‡¶Æ ‡¶´‡ßç‡ß∞‡ßá‡¶û‡ßç‡¶ö‡¶æ‡¶á‡¶ú ‡¶á‡¶£‡ßç‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡•§ ‡¶∏‡¶ï‡¶≤‡ßã ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡ß∞ ‡¶∏‡¶Ç‡ß∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§ | ‡¶ï‡ßá‡ß±‡¶≤ RBI ‡¶Ö‡¶®‡ßÅ‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶§‡ßç‡ß∞‡¶™‡ßç‡ß∞‡¶æ‡¶™‡ßç‡¶§ ‡¶Ö‡¶Ç‡¶∂‡ßÄ‡¶¶‡¶æ‡ß∞",
  ml: "¬© 2025 ‡¥é‡¥ü‡¥ø‡¥é‡¥Ç ‡¥´‡µç‡¥∞‡¥æ‡¥û‡µç‡¥ö‡µà‡¥∏‡¥ø ‡¥á‡¥®‡µç‡¥§‡µç‡¥Ø. ‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥Ö‡¥µ‡¥ï‡¥æ‡¥∂‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥®‡¥ø‡¥ï‡µç‡¥∑‡¥ø‡¥™‡µç‡¥§‡¥Ç. | RBI ‡¥≤‡µà‡¥∏‡µª‡¥∏‡µÅ‡¥≥‡µç‡¥≥ ‡¥™‡¥ô‡µç‡¥ï‡¥æ‡¥≥‡¥ø‡¥ï‡µæ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç"
};

console.log('üîß Fixing copyright contamination in all language files...\n');

let totalFixed = 0;
let totalErrors = 0;

// Process each language
Object.keys(copyrightTranslations).forEach(lang => {
  const filePath = path.join(__dirname, '..', 'public', 'locales', lang, 'common.json');
  
  try {
    if (fs.existsSync(filePath)) {
      const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      
      // Fix copyright - ensure only one correct entry
      const oldCopyright = content.copyright;
      content.copyright = copyrightTranslations[lang];
      
      // Remove any duplicate copyright entries if they exist
      const keys = Object.keys(content);
      const copyrightKeys = keys.filter(k => k.toLowerCase().includes('copyright'));
      
      if (copyrightKeys.length > 1) {
        console.log(`‚ö†Ô∏è  Found ${copyrightKeys.length} copyright entries in ${lang}/common.json`);
        copyrightKeys.forEach(key => {
          if (key !== 'copyright') {
            delete content[key];
            console.log(`   Removed duplicate: ${key}`);
          }
        });
      }
      
      // Write back the fixed content
      fs.writeFileSync(filePath, JSON.stringify(content, null, 2), 'utf8');
      
      if (oldCopyright !== copyrightTranslations[lang]) {
        console.log(`‚úÖ Fixed ${lang}/common.json copyright`);
        console.log(`   Old: ${oldCopyright}`);
        console.log(`   New: ${copyrightTranslations[lang]}\n`);
        totalFixed++;
      } else {
        console.log(`‚úì ${lang}/common.json copyright already correct\n`);
      }
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${lang}/common.json`);
      totalErrors++;
    }
  } catch (error) {
    console.error(`‚ùå Error processing ${lang}/common.json:`, error.message);
    totalErrors++;
  }
});

console.log('\n' + '='.repeat(80));
console.log(`üìä SUMMARY:`);
console.log(`   Fixed: ${totalFixed} files`);
console.log(`   Errors: ${totalErrors} files`);
console.log(`   Total languages: ${Object.keys(copyrightTranslations).length}`);
console.log('='.repeat(80));

if (totalFixed > 0) {
  console.log('\n‚úÖ Copyright contamination fixed successfully!');
  console.log('   All languages now have properly translated copyright text.');
} else if (totalErrors === 0) {
  console.log('\n‚úì All copyright translations were already correct!');
} else {
  console.log('\n‚ö†Ô∏è  Some issues were encountered. Please review the errors above.');
}